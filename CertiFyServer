
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Load configuration module
local successConfig, Config = pcall(function()
	return require(ReplicatedStorage:WaitForChild("CertiFyConfig"))
end)
if not successConfig then
	error("‚ùå Failed to load CertiFyConfig.")
end

-- Load data management module
local successData, Data = pcall(function()
	return require(script.Parent:WaitForChild("CertiFyData"))
end)
if not successData then
	error("‚ùå Failed to load CertiFyData.")
end

-- Setup remote references
local RemotesFolder = ReplicatedStorage:FindFirstChild("CertiFyRemotes")
if not RemotesFolder then
	error("‚ùå CertiFyRemotes folder is missing in ReplicatedStorage.")
end

local RequestCerts = RemotesFolder:FindFirstChild("RequestCerts")
local AddCert = RemotesFolder:FindFirstChild("AddCert")
local RemoveCert = RemotesFolder:FindFirstChild("RemoveCert")
local GetAuditLog = RemotesFolder:FindFirstChild("GetAuditLog")
local NotifyClients = RemotesFolder:FindFirstChild("NotifyClients")

if not (RequestCerts and AddCert and RemoveCert and GetAuditLog and NotifyClients) then
	error("‚ùå One or more remote events/functions are missing in CertiFyRemotes.")
end

-- Audit log for certification actions
local AuditLog = {}

-- Handle client request to fetch all certified users
RequestCerts.OnServerInvoke = function(player)
	local success, data = pcall(function()
		return Data.GetAllCertifiedUsers()
	end)

	if success then
		return data
	else
		warn("‚ùå Failed to fetch certification data.")
		return {}
	end
end

-- Handle adding a certification
AddCert.OnServerEvent:Connect(function(player, userId, cert)
	if typeof(userId) ~= "number" or typeof(cert) ~= "string" then
		warn("‚ùå Invalid add certification request from:", player.Name)
		return
	end

	local success = pcall(function()
		Data.AddCert(userId, cert)
	end)

	if success then
		table.insert(AuditLog, player.Name .. " added '" .. cert .. "' to userId " .. userId)
		NotifyClients:FireAllClients()
	else
		warn("‚ùå Failed to add certification:", cert, "to", userId)
	end
end)

-- Handle removing a certification
RemoveCert.OnServerEvent:Connect(function(player, userId, cert)
	if typeof(userId) ~= "number" or typeof(cert) ~= "string" then
		warn("‚ùå Invalid remove certification request from:", player.Name)
		return
	end

	local success = pcall(function()
		Data.RemoveCert(userId, cert)
	end)

	if success then
		table.insert(AuditLog, player.Name .. " removed '" .. cert .. "' from userId " .. userId)
		NotifyClients:FireAllClients()
	else
		warn("‚ùå Failed to remove certification:", cert, "from", userId)
	end
end)

-- Handle client request for audit logs
GetAuditLog.OnServerInvoke = function(player)
	local MAX_ENTRIES = 50
	local filteredLog = {}

	for i = math.max(1, #AuditLog - MAX_ENTRIES + 1), #AuditLog do
		table.insert(filteredLog, AuditLog[i])
	end

	return table.concat(filteredLog, "\n")
end

-- System loaded successfully
print("\n==========[ CertiFy System Loaded ]==========")
print("‚úîÔ∏è  Status: Initialized successfully")
print("üë§  Developer: dalton_brownzz")
print("üì¶  Module: CertiFy Handler")
print("üïí  Time: " .. os.date("%Y-%m-%d %H:%M:%S"))
print("=============================================\n")
